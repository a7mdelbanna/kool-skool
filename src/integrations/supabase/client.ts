
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://pmcvsnlgesgckqxxoiob.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBtY3ZzbmxnZXNnY2txeHhvaW9iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwNjIyODIsImV4cCI6MjA1NzYzODI4Mn0._MvFbExQAc_23ANTSZ1yxX6TQdiHrPEY2QwcoLrXkkE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a client with type safety
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// The original rpc method is preserved to maintain its functionality
const originalRpc = supabase.rpc.bind(supabase);

// Override the rpc method to accept any function name
// This uses a properly bound function to prevent 'rest' property errors
supabase.rpc = function(functionName: string, params?: Record<string, any>) {
  console.log(`Calling RPC function: ${functionName}`, params);
  // Use type assertion to satisfy TypeScript
  return originalRpc(functionName as any, params);
} as typeof supabase.rpc;

// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://clacmtyxfdtfgjkozmqf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNsYWNtdHl4ZmR0Zmdqa296bXFmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4OTEzMzgsImV4cCI6MjA2NjQ2NzMzOH0.HKKmBmDpQdZ7-hcpj7wM8IJPFVD52T-IfThF9jpjdvY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Type definitions for the application
export interface UserLoginResponse {
  success: boolean;
  message?: string;
  user_id?: string;
  first_name?: string;
  last_name?: string;
  role?: string;
  school_id?: string;
}

export interface SchoolSetupResponse {
  success: boolean;
  message?: string;
  school_id?: string;
  user_id?: string;
}

export interface TeamMemberResponse {
  success: boolean;
  message?: string;
  user_id?: string;
}

export interface CreateStudentResponse {
  success: boolean;
  message?: string;
  student_id?: string;
  user_id?: string;
}

export interface Course {
  id: string;
  school_id: string;
  name: string;
  lesson_type: string;
  created_at: string;
  updated_at: string;
}

export interface StudentRecord {
  id: string;
  school_id: string;
  user_id: string;
  teacher_id: string;
  course_id: string;
  age_group: string;
  level: string;
  phone: string;
  created_at: string;
  first_name: string;
  last_name: string;
  email: string;
  course_name: string;
  lesson_type: string;
  teacher_first_name: string;
  teacher_last_name: string;
  teacher_email: string;
}

// Helper functions for interacting with the database
export const getStudentsWithDetails = async (schoolId: string): Promise<StudentRecord[]> => {
  const { data, error } = await supabase.rpc('get_students_with_details', {
    p_school_id: schoolId
  });

  if (error) {
    console.error('Error fetching students:', error);
    throw error;
  }

  return data || [];
};

export const getSchoolCourses = async (schoolId: string): Promise<Course[]> => {
  console.log('getSchoolCourses called with schoolId:', schoolId);
  
  try {
    // Use the RPC function to bypass RLS
    const { data, error } = await supabase.rpc('get_school_courses', {
      p_school_id: schoolId
    });

    console.log('RPC get_school_courses result:', { data, error });

    if (error) {
      console.error('Error fetching courses via RPC:', error);
      throw error;
    }

    console.log('Successfully fetched courses:', data);
    return data || [];
  } catch (error) {
    console.error('Error in getSchoolCourses:', error);
    throw error;
  }
};

export const getSchoolTeamMembers = async (schoolId: string) => {
  console.log('getSchoolTeamMembers called with schoolId:', schoolId);
  
  try {
    // Use the database function instead of direct query
    const { data, error } = await supabase.rpc('get_team_members', {
      p_school_id: schoolId
    });

    console.log('Team members RPC result:', { data, error });

    if (error) {
      console.error('Error fetching team members via RPC:', error);
      throw error;
    }

    console.log('Successfully fetched team members:', data);
    return data || [];
  } catch (error) {
    console.error('Error in getSchoolTeamMembers:', error);
    throw error;
  }
};

export const getSchoolTeachers = async (schoolId: string) => {
  console.log('getSchoolTeachers called with schoolId:', schoolId);
  
  try {
    // Use the RPC function to bypass RLS consistently
    const { data, error } = await supabase.rpc('get_team_members', {
      p_school_id: schoolId
    });

    console.log('Teachers RPC result:', { data, error });

    if (error) {
      console.error('Error fetching teachers via RPC:', error);
      throw error;
    }

    console.log('Successfully fetched teachers:', data);
    
    // Filter only teachers and format for compatibility
    const teachers = (data || [])
      .filter(member => member.role === 'teacher')
      .map(teacher => ({
        id: teacher.id,
        first_name: teacher.first_name || '',
        last_name: teacher.last_name || '',
        email: teacher.email || '',
        display_name: teacher.first_name && teacher.last_name 
          ? `${teacher.first_name} ${teacher.last_name}`
          : teacher.email || `ID: ${teacher.id.substring(0, 8)}`
      }));

    console.log('Formatted teachers:', teachers);
    return teachers;
  } catch (error) {
    console.error('Error in getSchoolTeachers:', error);
    throw error;
  }
};

export const getStudentPayments = async (studentId: string) => {
  console.log('getStudentPayments called with studentId:', studentId);
  
  try {
    const { data, error } = await supabase.rpc('get_student_payments', {
      p_student_id: studentId
    });

    console.log('Student payments RPC result:', { data, error });

    if (error) {
      console.error('Error fetching student payments:', error);
      throw error;
    }

    console.log('Successfully fetched student payments:', data);
    return data || [];
  } catch (error) {
    console.error('Error in getStudentPayments:', error);
    throw error;
  }
};

export const addStudentPayment = async (paymentData: {
  student_id: string;
  amount: number;
  currency: string;
  payment_date: string;
  payment_method: string;
  status: string;
  notes?: string;
}) => {
  console.log('addStudentPayment called with:', paymentData);
  
  try {
    const { data, error } = await supabase
      .from('student_payments')
      .insert(paymentData)
      .select()
      .single();

    if (error) {
      console.error('Error adding student payment:', error);
      throw error;
    }

    console.log('Successfully added student payment:', data);
    return data;
  } catch (error) {
    console.error('Error in addStudentPayment:', error);
    throw error;
  }
};

export const deleteStudentPayment = async (paymentId: string) => {
  console.log('deleteStudentPayment called with paymentId:', paymentId);
  
  try {
    const { error } = await supabase
      .from('student_payments')
      .delete()
      .eq('id', paymentId);

    if (error) {
      console.error('Error deleting student payment:', error);
      throw error;
    }

    console.log('Successfully deleted student payment');
  } catch (error) {
    console.error('Error in deleteStudentPayment:', error);
    throw error;
  }
};

export const getStudentSubscriptions = async (studentId: string) => {
  console.log('getStudentSubscriptions called with studentId:', studentId);
  
  try {
    const { data, error } = await supabase.rpc('get_student_subscriptions', {
      p_student_id: studentId
    });

    console.log('Student subscriptions RPC result:', { data, error });

    if (error) {
      console.error('Error fetching student subscriptions:', error);
      throw error;
    }

    console.log('Successfully fetched student subscriptions:', data);
    return data || [];
  } catch (error) {
    console.error('Error in getStudentSubscriptions:', error);
    throw error;
  }
};

export const addStudentSubscription = async (subscriptionData: {
  student_id: string;
  session_count: number;
  duration_months: number;
  start_date: string;
  schedule: any;
  price_mode: string;
  price_per_session?: number;
  fixed_price?: number;
  total_price: number;
  currency: string;
  notes?: string;
  status?: string;
}) => {
  console.log('addStudentSubscription called with:', subscriptionData);
  
  try {
    const { data, error } = await supabase
      .from('subscriptions')
      .insert(subscriptionData)
      .select()
      .single();

    if (error) {
      console.error('Error adding student subscription:', error);
      throw error;
    }

    console.log('Successfully added student subscription:', data);
    return data;
  } catch (error) {
    console.error('Error in addStudentSubscription:', error);
    throw error;
  }
};

export const deleteStudentSubscription = async (subscriptionId: string) => {
  console.log('deleteStudentSubscription called with subscriptionId:', subscriptionId);
  
  try {
    const { error } = await supabase
      .from('subscriptions')
      .delete()
      .eq('id', subscriptionId);

    if (error) {
      console.error('Error deleting student subscription:', error);
      throw error;
    }

    console.log('Successfully deleted student subscription');
  } catch (error) {
    console.error('Error in deleteStudentSubscription:', error);
    throw error;
  }
};

export const addLessonSessions = async (sessions: Array<{
  subscription_id: string;
  student_id: string;
  scheduled_date: string;
  duration_minutes?: number;
  status?: string;
  payment_status?: string;
  cost: number;
  notes?: string;
}>) => {
  console.log('addLessonSessions called with:', sessions);
  
  try {
    const { data, error } = await supabase
      .from('lesson_sessions')
      .insert(sessions)
      .select();

    if (error) {
      console.error('Error adding lesson sessions:', error);
      throw error;
    }

    console.log('Successfully added lesson sessions:', data);
    return data;
  } catch (error) {
    console.error('Error in addLessonSessions:', error);
    throw error;
  }
};

export const getStudentLessonSessions = async (studentId: string) => {
  console.log('getStudentLessonSessions called with studentId:', studentId);
  
  try {
    const { data, error } = await supabase
      .from('lesson_sessions')
      .select(`
        id,
        subscription_id,
        student_id,
        scheduled_date,
        duration_minutes,
        status,
        payment_status,
        cost,
        notes,
        created_at
      `)
      .eq('student_id', studentId)
      .order('scheduled_date', { ascending: true });

    if (error) {
      console.error('Error fetching lesson sessions:', error);
      throw error;
    }

    console.log('Successfully fetched lesson sessions:', data);
    return data || [];
  } catch (error) {
    console.error('Error in getStudentLessonSessions:', error);
    throw error;
  }
};

export const updateLessonSessionStatus = async (sessionId: string, status: string) => {
  console.log('updateLessonSessionStatus called with:', { sessionId, status });
  
  try {
    const { error } = await supabase
      .from('lesson_sessions')
      .update({ status, updated_at: new Date().toISOString() })
      .eq('id', sessionId);

    if (error) {
      console.error('Error updating lesson session status:', error);
      throw error;
    }

    console.log('Successfully updated lesson session status');
  } catch (error) {
    console.error('Error in updateLessonSessionStatus:', error);
    throw error;
  }
};

export const createStudent = async (studentData: {
  student_email: string;
  student_password: string;
  first_name: string;
  last_name: string;
  teacher_id: string;
  course_id: string;
  age_group: string;
  level: string;
  phone?: string;
}): Promise<CreateStudentResponse> => {
  // Get current user data from localStorage
  const userString = localStorage.getItem('user');
  if (!userString) {
    throw new Error('No user found');
  }

  const user = JSON.parse(userString);
  
  // Call the edge function
  const response = await fetch(`${SUPABASE_URL}/functions/v1/create_student`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
      'x-user-id': user.id,
      'x-school-id': user.schoolId,
      'x-user-role': user.role,
    },
    body: JSON.stringify(studentData),
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return await response.json();
};

export const createCourse = async (courseData: {
  school_id: string;
  course_name: string;
  lesson_type: string;
}): Promise<Course> => {
  // Get current user data from localStorage
  const userString = localStorage.getItem('user');
  if (!userString) {
    throw new Error('No user found');
  }

  const user = JSON.parse(userString);
  
  // Call the edge function
  const response = await fetch(`${SUPABASE_URL}/functions/v1/create_course`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
      'x-user-id': user.id,
      'x-school-id': user.schoolId,
      'x-user-role': user.role,
    },
    body: JSON.stringify(courseData),
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return await response.json();
};

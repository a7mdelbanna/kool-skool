
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://clacmtyxfdtfgjkozmqf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNsYWNtdHl4ZmR0Zmdqa296bXFmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4OTEzMzgsImV4cCI6MjA2NjQ2NzMzOH0.HKKmBmDpQdZ7-hcpj7wM8IJPFVD52T-IfThF9jpjdvY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Type definitions for the application
export interface UserLoginResponse {
  success: boolean;
  message?: string;
  user_id?: string;
  first_name?: string;
  last_name?: string;
  role?: string;
  school_id?: string;
}

export interface SchoolSetupResponse {
  success: boolean;
  message?: string;
  school_id?: string;
  user_id?: string;
}

export interface TeamMemberResponse {
  success: boolean;
  message?: string;
  user_id?: string;
}

export interface CreateStudentResponse {
  success: boolean;
  message?: string;
  student_id?: string;
  user_id?: string;
}

export interface Course {
  id: string;
  school_id: string;
  name: string;
  lesson_type: string;
  created_at: string;
  updated_at: string;
}

export interface StudentRecord {
  id: string;
  school_id: string;
  user_id: string;
  teacher_id: string;
  course_id: string;
  age_group: string;
  level: string;
  phone: string;
  created_at: string;
  first_name: string;
  last_name: string;
  email: string;
  course_name: string;
  lesson_type: string;
  teacher_first_name: string;
  teacher_last_name: string;
  teacher_email: string;
}

// Helper functions for interacting with the database
export const getStudentsWithDetails = async (schoolId: string): Promise<StudentRecord[]> => {
  const { data, error } = await supabase.rpc('get_students_with_details', {
    p_school_id: schoolId
  });

  if (error) {
    console.error('Error fetching students:', error);
    throw error;
  }

  return data || [];
};

export const getSchoolCourses = async (schoolId: string): Promise<Course[]> => {
  const { data, error } = await supabase
    .from('courses')
    .select('*')
    .eq('school_id', schoolId)
    .order('name');

  if (error) {
    console.error('Error fetching courses:', error);
    throw error;
  }

  return data || [];
};

export const getSchoolTeachers = async (schoolId: string) => {
  const { data, error } = await supabase
    .from('users')
    .select('id, first_name, last_name, email')
    .eq('school_id', schoolId)
    .eq('role', 'teacher')
    .order('first_name');

  if (error) {
    console.error('Error fetching teachers:', error);
    throw error;
  }

  // Transform data to include display_name for compatibility
  return data?.map(teacher => ({
    ...teacher,
    display_name: `${teacher.first_name} ${teacher.last_name}`
  })) || [];
};

export const createStudent = async (studentData: {
  student_email: string;
  student_password: string;
  first_name: string;
  last_name: string;
  teacher_id: string;
  course_id: string;
  age_group: string;
  level: string;
  phone?: string;
}): Promise<CreateStudentResponse> => {
  // Get current user data from localStorage
  const userString = localStorage.getItem('user');
  if (!userString) {
    throw new Error('No user found');
  }

  const user = JSON.parse(userString);
  
  // Call the edge function
  const response = await fetch(`${SUPABASE_URL}/functions/v1/create_student`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
      'x-user-id': user.id,
      'x-school-id': user.schoolId,
      'x-user-role': user.role,
    },
    body: JSON.stringify(studentData),
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return await response.json();
};

export const createCourse = async (courseData: {
  school_id: string;
  course_name: string;
  lesson_type: string;
}): Promise<Course> => {
  // Get current user data from localStorage
  const userString = localStorage.getItem('user');
  if (!userString) {
    throw new Error('No user found');
  }

  const user = JSON.parse(userString);
  
  // Call the edge function
  const response = await fetch(`${SUPABASE_URL}/functions/v1/create_course`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
      'x-user-id': user.id,
      'x-school-id': user.schoolId,
      'x-user-role': user.role,
    },
    body: JSON.stringify(courseData),
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return await response.json();
};


// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://cfacqfrutwfbfibswckp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNmYWNxZnJ1dHdmYmZpYnN3Y2twIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwOTQ2MzMsImV4cCI6MjA1NzY3MDYzM30.QuxaZKXmhvdCLDUlVRA7Pge0JLm2EHl4qRApoGuevcE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to upload base64 image to schools
export const uploadBase64Image = async (
  base64String: string, 
  schoolId: string, 
  field: 'logo' | 'phone' | 'telegram' | 'whatsapp' | 'instagram'
) => {
  const { data, error } = await supabase
    .from('schools')
    .update({ [field]: base64String })
    .eq('id', schoolId);
    
  return { data, error };
};

// Helper function to fetch user profile data
export const fetchUserProfile = async () => {
  const { data: { user } } = await supabase.auth.getUser();
  
  if (!user) {
    throw new Error('No user authenticated');
  }
  
  // Add debug logging to see what data is coming from Supabase
  console.log("Auth user data:", user);
  
  const { data, error } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', user.id)
    .single();
    
  if (error) {
    console.error("Error fetching profile:", error);
    throw error;
  }
  
  console.log("Profile data from database:", data);
  
  return { user, profile: data };
};

// Helper function to update user profile
export const updateUserProfile = async (
  profileData: {
    first_name?: string;
    last_name?: string;
    phone?: string;
    profile_picture?: string | null;
  }
) => {
  const { data: { user } } = await supabase.auth.getUser();
  
  if (!user) {
    throw new Error('No user authenticated');
  }
  
  const { data, error } = await supabase
    .from('profiles')
    .update(profileData)
    .eq('id', user.id);
    
  if (error) {
    throw error;
  }
  
  return data;
};

// Improved helper function to check if an email exists in the auth system
const checkEmailExists = async (email: string) => {
  try {
    // First, check in the auth.users table via the profiles table
    // Since we can't directly query auth.users, we check the profiles table
    // which is linked to auth.users via triggers
    const { data: profileData, error: profileError } = await supabase
      .from('profiles')
      .select('email')
      .eq('email', email);
    
    if (profileError) {
      console.error("Error checking profiles for email:", profileError);
    }
    
    if (profileData && profileData.length > 0) {
      console.log(`Found email ${email} in profiles table`);
      return true;
    }

    // Check team_members table as well
    const { data: teamMemberData, error: teamMemberError } = await supabase
      .from('team_members')
      .select('email')
      .eq('email', email);
      
    if (teamMemberError) {
      console.error("Error checking team_members for email:", teamMemberError);
    }
    
    if (teamMemberData && teamMemberData.length > 0) {
      console.log(`Found email ${email} in team_members table`);
      return true;
    }
    
    // As a fallback, attempt sign-in with dummy password
    // This is less reliable but can catch cases where the email exists in auth
    // but not in our profiles/team_members tables
    const { error } = await supabase.auth.signInWithPassword({
      email: email,
      password: 'dummy-password-for-checking-only'
    });
    
    if (error) {
      // If the error suggests the email exists but password is wrong
      if (error.message.includes('Invalid login credentials')) {
        console.log(`Email ${email} exists in auth system (invalid credentials)`);
        return true;
      }
      
      if (error.message.includes('Email not confirmed')) {
        console.log(`Email ${email} exists in auth system (not confirmed)`);
        return true;
      }
    }
    
    console.log(`Email ${email} does not exist in any checked location`);
    return false; // Email doesn't exist
  } catch (error) {
    console.error("Error checking email existence:", error);
    return false;
  }
};

// Helper function to create a team member with direct authentication
export const createTeamMember = async (
  userData: {
    email: string;
    password: string;
    role: "director" | "teacher" | "admin" | "staff";
    firstName?: string;
    lastName?: string;
  }
) => {
  try {
    // Log the attempted creation for debugging
    console.log("Attempting to create team member with email:", userData.email);
    
    // First check if the email already exists
    const emailExists = await checkEmailExists(userData.email);
    
    if (emailExists) {
      console.log(`Email ${userData.email} already exists, stopping creation process`);
      throw new Error(`The email ${userData.email} is already registered. Please use a different email address.`);
    }
    
    // Proceed with creating the team member
    console.log("Creating team member with validated email:", userData.email);
    
    // Call the stored procedure with proper parameters
    const { data, error } = await supabase.rpc('create_team_member', {
      email_param: userData.email,
      password_param: userData.password,
      role_param: userData.role,
      first_name_param: userData.firstName || null,
      last_name_param: userData.lastName || null
    });
    
    if (error) {
      console.error("Error creating team member:", error);
      throw error;
    }
    
    // Add logging to help with debugging
    console.log("Team member created successfully:", data);
    return data;
  } catch (error) {
    console.error("Exception creating team member:", error);
    throw error;
  }
};
